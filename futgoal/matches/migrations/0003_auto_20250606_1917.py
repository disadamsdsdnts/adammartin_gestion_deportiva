# Generated by Django 5.2 on 2025-06-06 19:17

from django.db import migrations, models
import django.db.models.deletion


def create_rivals_from_matches(apps, schema_editor):
    """
    Crea entradas de Rival para todos los equipos rivales únicos en los partidos existentes
    """
    Match = apps.get_model('matches', 'Match')
    Rival = apps.get_model('rivals', 'Rival')
    Season = apps.get_model('season', 'Season')

    # Obtener todos los nombres únicos de equipos rivales
    away_teams = Match.objects.values_list('away_team', flat=True).distinct()

    # Obtener temporada activa para asignar a los rivales
    active_season = None
    try:
        active_season = Season.objects.filter(is_active=True).first()
    except:
        pass

    # Crear entradas de Rival para cada equipo rival único
    for team_name in away_teams:
        if team_name:  # Solo si no está vacío
            rival, created = Rival.objects.get_or_create(
                name=team_name,
                defaults={}
            )
            # Si hay una temporada activa, asignarla al rival
            if active_season and created:
                rival.seasons.add(active_season)


def link_matches_to_rivals(apps, schema_editor):
    """
    Enlaza los partidos existentes con los rivales creados
    """
    Match = apps.get_model('matches', 'Match')
    Rival = apps.get_model('rivals', 'Rival')

    for match in Match.objects.all():
        if match.away_team:  # Si tiene un nombre de equipo rival
            try:
                rival = Rival.objects.get(name=match.away_team)
                # Usamos el nuevo campo temporal para almacenar la relación
                match.away_team_rival_id = rival.id
                match.save(update_fields=['away_team_rival_id'])
            except Rival.DoesNotExist:
                # Si por alguna razón no existe, lo creamos
                rival = Rival.objects.create(name=match.away_team)
                match.away_team_rival_id = rival.id
                match.save(update_fields=['away_team_rival_id'])


def reverse_rivals_creation(apps, schema_editor):
    """
    Función reversa para deshacer la migración
    """
    Match = apps.get_model('matches', 'Match')
    Rival = apps.get_model('rivals', 'Rival')

    # Restaurar el nombre del equipo desde el rival
    for match in Match.objects.all():
        if hasattr(match, 'away_team_rival_id') and match.away_team_rival_id:
            try:
                rival = Rival.objects.get(id=match.away_team_rival_id)
                match.away_team = rival.name
                match.save(update_fields=['away_team'])
            except Rival.DoesNotExist:
                pass


class Migration(migrations.Migration):

    dependencies = [
        ('matches', '0002_matchnote'),
        ('rivals', '0001_initial'),  # Asegurar que existe la app rivals
    ]

    operations = [
        # Paso 1: Crear rivales desde los partidos existentes
        migrations.RunPython(create_rivals_from_matches, reverse_rivals_creation),

        # Paso 2: Agregar campo temporal para la relación
        migrations.AddField(
            model_name='match',
            name='away_team_rival',
            field=models.ForeignKey(
                null=True,
                on_delete=django.db.models.deletion.CASCADE,
                related_name='away_matches_temp',
                to='rivals.rival',
                verbose_name='Equipo visitante (temporal)'
            ),
        ),

        # Paso 3: Enlazar partidos con rivales
        migrations.RunPython(link_matches_to_rivals, reverse_rivals_creation),

        # Paso 4: Eliminar el campo antiguo
        migrations.RemoveField(
            model_name='match',
            name='away_team',
        ),

        # Paso 5: Renombrar el campo temporal al nombre final
        migrations.RenameField(
            model_name='match',
            old_name='away_team_rival',
            new_name='away_team',
        ),

        # Paso 6: Modificar el campo para que no sea nullable y actualizar related_name
        migrations.AlterField(
            model_name='match',
            name='away_team',
            field=models.ForeignKey(
                on_delete=django.db.models.deletion.CASCADE,
                related_name='away_matches',
                to='rivals.rival',
                verbose_name='Equipo visitante',
                help_text='Equipo rival'
            ),
        ),
    ]
